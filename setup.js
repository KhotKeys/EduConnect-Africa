#!/usr/bin/env node

/**
 * EduLearn Setup Script
 * This script helps configure Firebase for the EduLearn platform
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üéì Welcome to EduLearn Setup!');
console.log('This script will help you configure Firebase for your EduLearn platform.\n');

const questions = [
  {
    key: 'apiKey',
    question: 'Enter your Firebase API Key: ',
    required: true
  },
  {
    key: 'authDomain',
    question: 'Enter your Firebase Auth Domain (e.g., your-project.firebaseapp.com): ',
    required: true
  },
  {
    key: 'projectId',
    question: 'Enter your Firebase Project ID: ',
    required: true
  },
  {
    key: 'storageBucket',
    question: 'Enter your Firebase Storage Bucket (e.g., your-project.appspot.com): ',
    required: true
  },
  {
    key: 'messagingSenderId',
    question: 'Enter your Firebase Messaging Sender ID: ',
    required: true
  },
  {
    key: 'appId',
    question: 'Enter your Firebase App ID: ',
    required: true
  }
];

const config = {};

function askQuestion(index) {
  if (index >= questions.length) {
    generateConfig();
    return;
  }

  const question = questions[index];
  rl.question(question.question, (answer) => {
    if (question.required && !answer.trim()) {
      console.log('‚ùå This field is required. Please try again.\n');
      askQuestion(index);
      return;
    }

    config[question.key] = answer.trim();
    askQuestion(index + 1);
  });
}

function generateConfig() {
  const configContent = `// Firebase Configuration
// Generated by setup script on ${new Date().toISOString()}
const firebaseConfig = {
    apiKey: "${config.apiKey}",
    authDomain: "${config.authDomain}",
    projectId: "${config.projectId}",
    storageBucket: "${config.storageBucket}",
    messagingSenderId: "${config.messagingSenderId}",
    appId: "${config.appId}"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);

// Initialize Firebase services
const auth = firebase.auth();
const db = firebase.firestore();

// Export for use in other files
window.auth = auth;
window.db = db;`;

  const configPath = path.join(__dirname, 'frontend', 'js', 'firebase-config.js');
  
  try {
    fs.writeFileSync(configPath, configContent);
    console.log('\n‚úÖ Firebase configuration saved successfully!');
    console.log(`üìÅ Configuration saved to: ${configPath}`);
    
    // Create .env file for reference
    const envContent = `# Firebase Configuration
FIREBASE_API_KEY=${config.apiKey}
FIREBASE_AUTH_DOMAIN=${config.authDomain}
FIREBASE_PROJECT_ID=${config.projectId}
FIREBASE_STORAGE_BUCKET=${config.storageBucket}
FIREBASE_MESSAGING_SENDER_ID=${config.messagingSenderId}
FIREBASE_APP_ID=${config.appId}`;

    const envPath = path.join(__dirname, '.env');
    fs.writeFileSync(envPath, envContent);
    console.log(`üìÅ Environment file saved to: ${envPath}`);
    
    console.log('\nüöÄ Next steps:');
    console.log('1. Open frontend/index.html in your browser');
    console.log('2. Test the sign-up and login functionality');
    console.log('3. Deploy to Firebase Hosting: firebase deploy');
    console.log('\nüìö For more information, check the README.md file');
    
  } catch (error) {
    console.error('‚ùå Error saving configuration:', error.message);
  }
  
  rl.close();
}

// Start the setup process
askQuestion(0);
